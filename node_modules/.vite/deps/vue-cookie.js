import {
  __commonJS
} from "./chunk-BHN6OJC3.js";

// node_modules/tiny-cookie/tiny-cookie.js
var require_tiny_cookie = __commonJS({
  "node_modules/tiny-cookie/tiny-cookie.js"(exports, module) {
    !function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(factory);
      } else if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.Cookie = factory();
      }
    }(exports, function() {
      "use strict";
      function Cookie(key, value, opts) {
        if (value === void 0) {
          return Cookie.get(key);
        } else if (value === null) {
          Cookie.remove(key);
        } else {
          Cookie.set(key, value, opts);
        }
      }
      Cookie.enabled = function() {
        var key = "__test_key";
        var enabled;
        document.cookie = key + "=1";
        enabled = !!document.cookie;
        if (enabled)
          Cookie.remove(key);
        return enabled;
      };
      Cookie.get = function(key, raw) {
        if (typeof key !== "string" || !key)
          return null;
        key = "(?:^|; )" + escapeRe(key) + "(?:=([^;]*?))?(?:;|$)";
        var reKey = new RegExp(key);
        var res = reKey.exec(document.cookie);
        return res !== null ? raw ? res[1] : decodeURIComponent(res[1]) : null;
      };
      Cookie.getRaw = function(key) {
        return Cookie.get(key, true);
      };
      Cookie.set = function(key, value, raw, opts) {
        if (raw !== true) {
          opts = raw;
          raw = false;
        }
        opts = opts ? convert(opts) : convert({});
        var cookie = key + "=" + (raw ? value : encodeURIComponent(value)) + opts;
        document.cookie = cookie;
      };
      Cookie.setRaw = function(key, value, opts) {
        Cookie.set(key, value, true, opts);
      };
      Cookie.remove = function(key) {
        Cookie.set(key, "a", { expires: new Date() });
      };
      function escapeRe(str) {
        return str.replace(/[.*+?^$|[\](){}\\-]/g, "\\$&");
      }
      function convert(opts) {
        var res = "";
        for (var p in opts) {
          if (opts.hasOwnProperty(p)) {
            if (p === "expires") {
              var expires = opts[p];
              if (typeof expires !== "object") {
                expires += typeof expires === "number" ? "D" : "";
                expires = computeExpires(expires);
              }
              opts[p] = expires.toUTCString();
            }
            if (p === "secure") {
              if (opts[p]) {
                res += ";" + p;
              }
              continue;
            }
            res += ";" + p + "=" + opts[p];
          }
        }
        if (!opts.hasOwnProperty("path")) {
          res += ";path=/";
        }
        return res;
      }
      function computeExpires(str) {
        var expires = new Date();
        var lastCh = str.charAt(str.length - 1);
        var value = parseInt(str, 10);
        switch (lastCh) {
          case "Y":
            expires.setFullYear(expires.getFullYear() + value);
            break;
          case "M":
            expires.setMonth(expires.getMonth() + value);
            break;
          case "D":
            expires.setDate(expires.getDate() + value);
            break;
          case "h":
            expires.setHours(expires.getHours() + value);
            break;
          case "m":
            expires.setMinutes(expires.getMinutes() + value);
            break;
          case "s":
            expires.setSeconds(expires.getSeconds() + value);
            break;
          default:
            expires = new Date(str);
        }
        return expires;
      }
      return Cookie;
    });
  }
});

// node_modules/vue-cookie/src/vue-cookie.js
var require_vue_cookie = __commonJS({
  "node_modules/vue-cookie/src/vue-cookie.js"(exports, module) {
    (function() {
      Number.isInteger = Number.isInteger || function(value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
      };
      var Cookie = require_tiny_cookie();
      var VueCookie = {
        install: function(Vue2) {
          Vue2.prototype.$cookie = this;
          Vue2.cookie = this;
        },
        set: function(name, value, daysOrOptions) {
          var opts = daysOrOptions;
          if (Number.isInteger(daysOrOptions)) {
            opts = { expires: daysOrOptions };
          }
          return Cookie.set(name, value, opts);
        },
        get: function(name) {
          return Cookie.get(name);
        },
        delete: function(name, options) {
          var opts = { expires: -1 };
          if (options !== void 0) {
            opts = Object.assign(options, opts);
          }
          this.set(name, "", opts);
        }
      };
      if (typeof exports == "object") {
        module.exports = VueCookie;
      } else if (typeof define == "function" && define.amd) {
        define([], function() {
          return VueCookie;
        });
      } else if (window.Vue) {
        window.VueCookie = VueCookie;
        Vue.use(VueCookie);
      }
    })();
  }
});
export default require_vue_cookie();
/*!
 * tiny-cookie - A tiny cookie manipulation plugin
 * https://github.com/Alex1990/tiny-cookie
 * Under the MIT license | (c) Alex Chao
 */
//# sourceMappingURL=vue-cookie.js.map
